{
  "name": "cheerleader",
  "displayName": "Cheerleader",
  "publisher": "cheerleader",
  "description": "Supercharge your dev experience with an anime coding companion",
  "version": "1.0.2",
  "engines": {
    "vscode": "^1.99.0"
  },
  "icon": "assets/cheerleader_icon.png",
  "author": {
    "name": "James Zheng and Jet Chiang",
    "email": "endernoke@gmail.com"
  },
  "pricing": "Free",
  "categories": [
    "Themes",
    "AI",
    "Chat",
    "Education",
    "Other"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/endernoke/vscode-cheerleader"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/endernoke/vscode-cheerleader/issues",
    "email": "endernoke@gmail.com"
  },
  "homepage": "https://github.com/endernoke/vscode-cheerleader/blob/main/README.md",
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "taskDefinitions": [
      {
        "type": "cheerleader"
      }
    ],
    "commands": [
      {
        "command": "cheerleader.launchOverlay",
        "title": "Launch Interactive Cheerleader",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.killOverlay",
        "title": "Dismiss Interactive Cheerleader",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.inlineChat",
        "title": "Inline Chat with Cheerleader",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.inlineChatVoice",
        "title": "Inline Voice Chat with Cheerleader",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.rubberDuckVoice",
        "title": "Debug with Rubber Duck",
        "category": "Cheerleader",
        "icon": "$(duck)"
      },
      {
        "command": "cheerleader.reviewCode",
        "title": "Review Code with Cheerleader",
        "category": "Cheerleader",
        "icon": "$(eye)"
      },
      {
        "command": "cheerleader.toggleEncouragement",
        "title": "Toggle Coding Encouragement",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.toggleMonitoringRotting",
        "title": "Toggle Monitoring Rotting",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.explainPastedCode",
        "title": "Explain Pasted Code",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.togglePasteMonitoring",
        "title": "Toggle Paste Monitoring",
        "category": "Cheerleader"
      },
      {
        "command": "cheerleader.testTTS",
        "title": "Test Voice Module",
        "category": "Testing"
      },
      {
        "command": "cheerleader.testEncouragement",
        "title": "Test Encouragement Module",
        "category": "Testing"
      },
      {
        "command": "cheerleader.record",
        "title": "Start Voice Recording",
        "category": "Testing"
      },
      {
        "command": "cheerleader.startVoiceInteraction",
        "title": "Speak to Cheerleader",
        "category": "Testing"
      }
    ],
    "menus": {},
    "keybindings": [
      {
        "command": "cheerleader.inlineChatVoice",
        "key": "cmd+shift+c",
        "mac": "cmd+shift+c"
      },
      {
        "command": "cheerleader.reviewCode",
        "key": "ctrl+shift+r",
        "mac": "cmd+shift+r"
      },
      {
        "command": "cheerleader.rubberDuckVoice",
        "key": "ctrl+shift+d",
        "mac": "cmd+shift+d"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cheerleader-sidebar",
          "title": "Cheerleader",
          "icon": "assets/cheerleader.png"
        }
      ]
    },
    "views": {
      "cheerleader-sidebar": [
        {
          "id": "cheerleader-controls",
          "name": "Controls",
          "type": "webview",
          "icon": "assets/cheerleader.png"
        }
      ]
    },
    "configuration": {
      "title": "Cheerleader",
      "properties": {
        "cheerleader.encouragement.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable automated encouragement messages"
        },
        "cheerleader.encouragement.frequency": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ],
          "default": "medium",
          "description": "How frequently encouragement messages are shown"
        },
        "cheerleader.productivity.monitoringEnabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable productivity monitoring"
        },
        "cheerleader.paste.monitoringEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable/disable paste monitoring"
        },
        "cheerleader.model.family": {
          "type": "string",
          "enum": [
            "gpt-4o",
            "gpt-4o-mini",
            "o1",
            "o1-mini",
            "claude-3.5-sonnet"
          ],
          "default": "gpt-4o",
          "description": "The Copilot model family to use"
        },
        "cheerleader.audio.provider": {
          "type": "string",
          "enum": [
            "elevenlabs",
            "huggingface"
          ],
          "default": "elevenlabs",
          "description": "The model provider to use for STT and TTS"
        },
        "cheerleader.health.breakReminderEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable or disable break reminders"
        },
        "cheerleader.health.breakReminderIntervalMinutes": {
          "type": "number",
          "default": 45,
          "description": "How often to remind for breaks (in minutes)"
        },
        "cheerleader.health.breakDurationMinutes": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 60,
          "description": "How long each break should last (in minutes)"
        }
      }
    }
  },
  "scripts": {
    "compile": "npm run check-types && node build.js",
    "check-types": "tsc --noEmit",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "vscode:prepublish": "npm run package",
    "package": "npm run check-types && node build.js --production",
    "deploy": "vsce publish",
    "test": "npm run compile && node ./out/test/extension.test.js"
  },
  "devDependencies": {
    "@types/dotenv": "^6.1.1",
    "@types/markdown-it": "^13.0.1",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/node-microphone": "^0.1.4",
    "@types/play-sound": "^1.1.2",
    "@types/vscode": "^1.99.1",
    "@types/ws": "^8.18.1",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.3.2",
    "esbuild": "^0.25.3",
    "eslint": "^9.23.0",
    "typescript": "^5.8.2"
  },
  "dependencies": {
    "@vscode/prompt-tsx": "^0.4.0-alpha.3",
    "axios": "^1.8.4",
    "electron": "^35.1.1",
    "elevenlabs": "^1.55.0",
    "markdown-it": "^13.0.2",
    "mp3-duration": "^1.1.0",
    "node-microphone": "^0.1.6",
    "play-sound": "^1.1.6",
    "tsx": "^4.19.3",
    "uuid": "^11.1.0",
    "ws": "^8.18.1"
  }
}
